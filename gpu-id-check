#!/bin/bash

# Show GPU info:
#   - vendor name
#   - GPU id
#   - GPU model (optional)



# General helper functions:
echo2()   { echo "$@" >&2 ; }
_DIE2()   { echo2 "$1" ; exit 1 ; }
DIE()     { _DIE2 "Error: $1" ; }
ASSERT() {              # usage: ASSERT condition-to-assert
    test "$@" || _DIE2 "ASSERT: function '${FUNCNAME[1]}', line ${BASH_LINENO[0]}: '$*'"
}
ASSERT2() {             # usage: ASSERT "error-message" condition-to-assert
    local msg="$1"
    shift
    test "$@" || _DIE2 "ASSERT: function '${FUNCNAME[1]}', line ${BASH_LINENO[0]}: '$msg'"
}


# Hard-coded data:
declare -A VENDOR_CODES
VENDOR_CODES["intel"]=8086
VENDOR_CODES["nvidia"]=10de
VENDOR_CODES["amd"]=1002

declare -A VENDOR_NAMES
VENDOR_NAMES["8006"]=intel
VENDOR_NAMES["10de"]=nvidia
VENDOR_NAMES["1002"]=amd


# Low level functions:
_GetGpuName() {  # not used?
    local vendorcode="$1"
    lspci -vnn | grep -w -P '0300|0302|0380' | grep $vendorcode: | \
        sed -e 's|^.* \[[0-9a-f]*\]: ||' -e 's| \[[0-9a-f:]*\].*$||'
}
_GetGpuId() {
    local vendorcode="$1"
    lspci -n | grep -w -P '0300|0302|0380' | grep $vendorcode: | awk '{print $3}' | cut -d ':' -f 2
}

# Middle level functions:
_GpuInfo() {
    local vendorcode="$1"
    local func="$2"
    ASSERT2 "unsupported vendor code '$vendorcode'" -n "$vendorcode"
    $func $vendorcode
}

# High level functions:
VendorCode() {
    local vendorname="$1"
    local code="${VENDOR_CODES["$vendorname"]}"
    ASSERT2 "unsupported vendor '$vendorname'" -n "$code"
    echo "$code"
}
VendorName() {  # not used?
    local vendorcode="$1"
    local name="${VENDOR_NAMES["$vendorcode"]}"
    ASSERT2 "unsupported vendor code '$vendorcode'" -n "$name"
    echo "$name"
}
GpuId()   { local vendorcode="$1" ; _GpuInfo "$vendorcode" _GetGpuId ; }
GpuName() { local vendorcode="$1" ; _GpuInfo "$vendorcode" _GetGpuName ; }  # not used?

GetNameFromDB() {
    local gpuid="$1"
    local vendorcode="$2"
    local dbfile=/usr/share/hwdata/pci.ids   # package 'hwids'
    local vendorlines="$(cat $dbfile | sed -n '/^'"$vendorcode"'/,/^[0-9a-f]/ p' | head -n -1)"
    echo "$vendorlines" | grep -w $gpuid | sed 's|^[ \t]*[0-9a-f]*[ \t]*||'
}

Main()
{
    local gpuid id
    local vendorname
    local vendorcode
    local line
    local arg="$1"
    local showname=0

    # handle parameters:
    case "$arg" in
        "") ;;                    # original behavior!

        -n) showname=1 ;;
        -dbt=*)
            # database testing, for example: -dbt=intel:xxxx
            vendorname="$(echo "$arg" | cut -d '=' -f 2 | cut -d ':' -f 1)"
            gpuid="$(     echo "$arg" | cut -d '=' -f 2 | cut -d ':' -f 2)"
            vendorcode="$(VendorCode "$vendorname")"
            echo "GPU-name: $(GetNameFromDB $gpuid $vendorcode)"
            return
            ;;

        *) echo2 "Unsupported option '$arg'"
           echo2 "Usage: $0 [-n]"
           echo2 "   -n                  Show GPU name too."
           echo2 "   -dbt=vendor:gpuid   Show name of given card."
           exit 1
           ;;
    esac

    # search for GPU hardware and show info about it:
    for vendorname in intel nvidia amd ; do
        vendorcode="$(VendorCode "$vendorname")"
        ASSERT -n "$vendorcode"
        gpuid="$(GpuId $vendorcode)"
        if [ -n "$gpuid" ] ; then
            # There may be more than one id! Thinkpad T60, what's going on?
            for id in $gpuid ; do
                line="$vendorname $id"
                test $showname -eq 1 && line+=" '$(GetNameFromDB $id $vendorcode)'"
                echo "$line"
            done
        fi
    done
}

Main "$@"
